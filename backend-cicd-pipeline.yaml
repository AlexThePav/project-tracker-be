AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Creates a CI/CD pipeline to build and deploy the serverless backend
  using CodeCommit, CodeBuild, CodePipeline, and CloudFormation.

Parameters:
  CodeRepoName:
    Type: String
    Description: The name of the CodeCommit repository.
    Default: project-tracker-backend-repo
  BackendStackName:
    Type: String
    Description: The name of the CloudFormation stack for the backend resources.
    Default: project-tracker-backend

Resources:
  # -------------------------------------------------------------------
  # CodeCommit Repository
  # -------------------------------------------------------------------
  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeRepoName
      RepositoryDescription: "Source code for the project tracker backend."

  # -------------------------------------------------------------------
  # IAM Roles for the Pipeline
  # -------------------------------------------------------------------
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                Resource:
                  - !GetAtt PipelineArtifactsBucket.Arn
                  - !Join ["/", [!GetAtt PipelineArtifactsBucket.Arn, "*"]]
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:ListBranches
                  - codecommit:GitPull
                Resource: !GetAtt CodeRepo.Arn
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplate
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${BackendStackName}/*"
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: !GetAtt CloudFormationRole.Arn

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObjectAcl
                Resource:
                  - !GetAtt PipelineArtifactsBucket.Arn
                  - !Join ["/", [!GetAtt PipelineArtifactsBucket.Arn, "*"]]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              # This allows CodeBuild to run 'sam package'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${BackendStackName}-lambda-code-${AWS::AccountId}"
                  - !Sub "arn:aws:s3:::${BackendStackName}-lambda-code-${AWS::AccountId}/*"

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # AdministratorAccess for simplicity. In production, use a more restrictive policy.

  # -------------------------------------------------------------------
  # CodeBuild Project to Build the Lambda
  # -------------------------------------------------------------------
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-backend-build"
      Description: "Builds and packages the Python backend Lambda."
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
        Name: "BuildArtifacts"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/standard:5.0"
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Installing AWS SAM CLI...
                - pip install aws-sam-cli
            build:
              commands:
                - echo Packaging Lambda function...
                - sam package --template-file project-tracker-backend.yaml --s3-bucket ${BackendStackName}-lambda-code-${AWS::AccountId} --output-template-file packaged.yaml
          artifacts:
            files:
              - "**/*"
            base-directory: "."

  # -------------------------------------------------------------------
  # CodePipeline to Orchestrate CI/CD
  # -------------------------------------------------------------------
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-backend-pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              OutputArtifacts:
                - Name: SourceArtifacts
              Configuration:
                RepositoryName: !Ref CodeRepo
                BranchName: master
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceArtifacts
              OutputArtifacts:
                - Name: BuildArtifacts
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: BuildArtifacts
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref BackendStackName
                TemplatePath: "BuildArtifacts::packaged.yaml"
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationRole.Arn
              RunOrder: 1

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-pipeline-artifacts-${AWS::AccountId}"

Outputs:
  CodeCommitRepositoryURL:
    Description: "URL for the CodeCommit repository."
    Value: !GetAtt CodeRepo.CloneUrlHttp
  PipelineURL:
    Description: "URL for the CodePipeline."
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${Pipeline}/view?region=${AWS::Region}"
